/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cmu.edu.perceptron;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author zimo
 */
public class Perceptron_Window extends javax.swing.JFrame {

    /**
     * Creates new form Perceptron_Window
     */
    public Perceptron_Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        dataPath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        predictPath = new javax.swing.JTextField();
        dataFile = new javax.swing.JButton();
        resultFile = new javax.swing.JButton();
        offline = new javax.swing.JButton();
        online = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        quit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Perceptron");
        setName("Perceptron App"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Perceptron"));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Save Feature Weights to: ");

        dataPath.setText("File Path");
        dataPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataPathActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose Data File: ");

        predictPath.setText("File Path");

        dataFile.setText("Choose File");
        dataFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataFileActionPerformed(evt);
            }
        });

        resultFile.setText("Choose Location");
        resultFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultFileActionPerformed(evt);
            }
        });

        offline.setText("Do Offline");
        offline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offlineActionPerformed(evt);
            }
        });

        online.setText("Do Online");
        online.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(predictPath, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(dataPath))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(offline, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                        .addComponent(online, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(resultFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dataFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataFile)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(predictPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(resultFile))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(offline)
                    .addComponent(online)
                    .addComponent(clear))
                .addGap(60, 60, 60))
        );

        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(quit, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(quit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataPathActionPerformed

    private void dataFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Only csv", new String[]{"csv"});
        chooser.setFileFilter(filter);
        chooser.setSelectedFile(new File("/home/zimo/workspace/Perceptron/resources/tictactoe.csv"));
        int f = chooser.showOpenDialog(this);
        String rowset = chooser.getSelectedFile().getAbsolutePath();
        
        if(f == JFileChooser.APPROVE_OPTION) {
        System.out.println("You chose to open this file: " + rowset);
        
        }
        
        dataPath.setText(rowset);
        
        ArrayList<DataSet> train = new ArrayList<DataSet>();
    }//GEN-LAST:event_dataFileActionPerformed

    private void resultFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultFileActionPerformed
       JFileChooser chooser = new JFileChooser();
        
       int f = chooser.showSaveDialog(this);
       
       if(f == JFileChooser.APPROVE_OPTION) {
        System.out.println("You chose to save this file to: " +
        chooser.getSelectedFile().getName());         
        }
       
       String pre=null;
       
       pre = chooser.getSelectedFile().getAbsolutePath();
       predictPath.setText(pre);
       
    }//GEN-LAST:event_resultFileActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        dataPath.setText("");
        predictPath.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitActionPerformed

    private void offlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offlineActionPerformed
        System.out.println("Strating offline prediction...");
        
        this.setAlwaysOnTop(false);
        Reader reader = new Reader();		
	
        ArrayList<DataSet> row = reader.readDataFile(dataPath.getText());
        ArrayList<DataSet> train = reader.splitTrainData(dataPath.getText());
        ArrayList<DataSet> test = reader.splitTestData(dataPath.getText());
        
        double alpha = 0.00001;
        Random rand = new Random();

        Double[] w = new Double[train.get(0).getFeature().length];
        for (int i = 0; i < w.length; i++) {
          w[i] = rand.nextDouble();
        }
        int loop = 10000;
        while (--loop >= 0) {
          double[] deltaW = new double[w.length];
          double hit = 0.0;
          for (int i = 0; i < train.size(); i++) {
            double h = 0;
            // DataSet doc = train.get(i);
            DataSet doc = train.get(i / 2 + (i % 2) * (train.size() / 2));

            for (int k = 0; k < doc.getFeature().length; k++) {
              h += doc.getFeature()[k] * w[k];
            }
            // System.out.println(">>" + h);
            for (int j = 0; j < doc.getFeature().length; j++) {
    //          if (h * doc.getY() < 0)
                deltaW[j] += alpha * (doc.getY() - h) * doc.getFeature()[j];
              // else
              // deltaW[j] -= alpha * (doc.getY() - h) * doc.getFeature()[j];
            }
            // System.out.println(deltaW[0] + "\t" + deltaW[1]);
            if (h * doc.getY() > 0) {
              hit++;
            }
          }
          
          System.out.println(deltaW[0] + "\t" + deltaW[1] + "\t" + (hit / train.size()));
          
          for (int i = 0; i < w.length; i++) {
            w[i] += deltaW[i];
          }
          // if (loop % 100 == 0) {
          // doTest(train, w);
          // }
        }
    try {   
        FileWriter fw = new FileWriter(predictPath.getText());
	PrintWriter pw = new PrintWriter(fw);
        
        pw.print("feature");
        pw.print(",");
	pw.print("weight");
	pw.println();
        
        for (int i = 0; i < w.length; i++) {
            pw.print("f");
            pw.print(i);
            pw.print(",");
            pw.print(w[i]);
            pw.println();
        }
        
        pw.flush();
	pw.close();
	fw.close();
        } catch (IOException e) {
                e.printStackTrace();
	}
        
        
    
        Perceptron_Offline offline = new Perceptron_Offline(w, test);
        offline.setVisible(true);
    }//GEN-LAST:event_offlineActionPerformed

    private void onlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineActionPerformed
        System.out.println("Strating online prediction...");
        
        this.setAlwaysOnTop(false);
        Reader reader = new Reader();		
	
        ArrayList<DataSet> row = reader.readDataFile(dataPath.getText());
        ArrayList<DataSet> train = reader.splitTrainData(dataPath.getText());
        ArrayList<DataSet> test = reader.splitTestData(dataPath.getText());
        
        
        
        double alpha = 0.0001;
        Random rand = new Random();

        Double[] w = new Double[train.get(0).getFeature().length];
        for (int i = 0; i < w.length; i++) {
          w[i] = rand.nextDouble();
        }
    //    int loop = 100;
    //    while (--loop >= 0) {
    //      double[] deltaW = new double[w.length];
          double hit = 0.0;
          for (int i = 0; i < train.size(); i++) {
            double h = 0;
            // DataSet doc = train.get(i);
            DataSet doc = train.get(i / 2 + (i % 2) * (train.size() / 2));

            for (int k = 0; k < doc.getFeature().length; k++) {
              h += doc.getFeature()[k] * w[k];
            }

            for (int j = 0; j < doc.getFeature().length; j++) {
              if (h * doc.getY() < 0)
                w[j] += alpha * (doc.getY() - h) * doc.getFeature()[j];
              // else
              // deltaW[j] -= alpha * (doc.getY() - h) * doc.getFeature()[j];
            }

          }    
       
       Perceptron_Online online = new Perceptron_Online(w, test);
       online.setVisible(true);
    }//GEN-LAST:event_onlineActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Perceptron_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Perceptron_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Perceptron_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Perceptron_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        ArrayList<DataSet> row = new ArrayList<DataSet>();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Perceptron_Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton dataFile;
    private javax.swing.JTextField dataPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton offline;
    private javax.swing.JButton online;
    private javax.swing.JTextField predictPath;
    private javax.swing.JButton quit;
    private javax.swing.JButton resultFile;
    // End of variables declaration//GEN-END:variables
}
